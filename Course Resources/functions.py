def compare_dataframes(df1, df2, details=True):
    import pandas as pd
    # Rename columns of df2 to match df1 if they have different column names so we can comopare them
    # 1. zip(df2.columns, df1.columns): This creates an iterator that aggregates elements from df2.columns 
        #   and df1.columns pairwise. So, for each iteration, it pairs up the corresponding column names from 
        #   df2 and df1.
        # 2. dict(...): This converts the pairs of column names generated by zip into a dictionary where the 
        #   keys are the column names of df2 and the values are the corresponding column names of df1. This 
        #   effectively maps the column names of df2 to the column names of df1.
        # 3. df2.rename(...): This renames the columns of df2 using the dictionary created in the previous step. 
        #   It maps the column names of df2 to the corresponding column names of df1, effectively aligning the 
        #   column names of df2 with those of df1.
    if set(df1.columns) != set(df2.columns): # If the columns names are not the same
        df2 = df2.rename(columns=dict(zip(df2.columns, df1.columns))) # Rename the columns of df2 to match df1
    
    if df1.equals(df2):
        if details == True: # If the user wants to see the details
            print("The dataframes are identical")
        else: return True # If the user doesn't want to see the details, return boolean
    else:
        if details == True: # If the user wants to see the details
            print("The dataframes are not identical")
            if (df1.shape != df2.shape): # Check if the arrays are the same size before we iterate
                print("The arrays are not the same size")
                print(f'First dataframe: {df1.shape[0]} rows, {df1.shape[1]} cols\nSecond dataframe: {df2.shape[0]} rows, {df2.shape[1]} cols')
            else: # If they are the same size but still not the same, output the indexes that are different 
                i = 0
                for i in range(df1.shape[0]): # Iterate through the rows
                    for j in range(df1.shape[1]): # Iterate through the columns
                        if df1.iat[i, j] != df2.iat[i, j]: # If the values at the same index are different
                            print(f'Values at index ({i}, {j}) are different:')
                            print(f'df1: {df1.iat[i, j]}, df2: {df2.iat[i, j]}')
        else: return False # If the user doesn't want to see the details, return boolean

# Add any functions you would like to here! The nice thing about these kinds of files is that you can import them into
# any notebook you want to use them in. It's like your own personal library of functions!